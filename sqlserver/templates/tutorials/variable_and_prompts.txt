Main elements within a template  are:
{% raw %}
{% ... %} for Statements
{{ ... }} for Expressions to print to the template output
Variables are placed within statements or expressions and when the application runs they are prompted if they dont have a value.
Then main different between Statements and Expressions is that statements do NOT show the variable when the template is rendered but expressions will.
Therefore when you are doing computations and assigning values to variables you might want to use statements so those values not displayed.
These are  the main forms in which variables are prompted:
	1. Simple Expression
	2. Expression with filter
	3. Simple assignement
	4. Assigment with filter
{% endraw %}


1. SIMPLE EXPRESSION
When the variable is prompted to the user, the variable is set to the value the user enters.
	Example:
		Hi {{ name }}; #prompts 'name'

	**Variable used in multiple places**
	When the variable is used in more than one placed, the variable is only prompt once, which corresponds to the first ocurrence within the template. 
	Take this into account if you want to use a description filter, make sure it is apply to the first occurence.
	Example:
		Hi {{ surname | description("Please enter surname") }} and welcome back Mrs {{ surname }}

2. EXPRESSION WITH FILTER
Filters change the value when the template is rendered. However they do NOT change value of the variable itself.

Example 1(capitalize filter)
	Hi {{capitalized_customer | capitalize() }}.
	Assuming the user enters 'mark'. It renders as 'Hi Mark'.
	However The value of the customer var is {{capitalized_customer}} =='mark'

Example 2 (default filter)
  Hi {{default_customer | default("Mark") }}.
  {% raw %}
  In this case is even more clear when the user decides to enter nothing an go with the default value.
  In this scenario try to render '{{default_customer}}' in a different place will thow an Undefined exception
  {% endraw %}

3. SIMPLE ASSIGMENT
We can assign values to variables and them use them in a filter
Example - Simple Assignment:
	{% set default_address = "212 78st St" %}
	We send a letter to {{ address | default(default_address) }}
	This prompts for 'address' and defaults to '212 78st St'

4. ASSIGMENT WITH FILTER
Example:
	{% set __display_name = display_name | default("Mark") %}
	{{__display_name}} can now be used in multiple places in this script or could be used in included templates.
	This prompts 'display_name'. 
	Remember filters change the rendered value not the variable itself:
		If the user enters 'Mark', then both variables '__display_name' and 'display_name' will have the same value ('Mark').
		If the user enters nothing, then default value is applied. In this case '__display_name= Mark' and 'display_name' is Undefined and if tries
		to be used further down within the template will throw an Undefined exception.

VARIABLES NOT PROMPT WITHIN FILTERS
Variables used within filters are not prompt and therefore need to be initialized:
{% raw %}
Dear {{ agent_name | default(default_agent_name) }}
This will prompt agent_name but not default_agent_name. So if the 'default_agent_name' is not initialized previously it wil throw an Undefined exception
{% endraw %}
NAMING CONVENTION:
Variables names are created in snake case (e.g. 'house_number')
On assignment filters when we are capturing one variable, is that variable to the right of the '=' that is displayed to the prompt. 
In that case we use the more friendly name for that variable and the variable to left of the '=' (which is likely use further down in the template)
is prefixed with '__':
		{% set __house_number  = house_number |
														   description ("Please enter the house number") %}
		{{__house_number}} can now be used in multiple places in this template or within included templates.
Variables starting with '_' are reserved for those ones already in the initial context, which provide functinality when writting templates(e.g. _keynames)


STRINC UNDEFINED
We are using the StrictUndefined jinja. This means that try rendering a variable (e.g. {{variable_1}}) that does not have a value,
throws an undefined exception.
This is different from the default jinja 'Undefined' class will render is a blank.
