When creating SQL scripts we should be using keynames instead of ids.

There is an object "_keynames" in context which combined with the filter "suggest" can be very helpfull

{{ entity_def_keyname | suggest(_keynames.ED) }}

Some fields can be null which means it not possible to use just the keyname and we woull insteall the "full keyname":

--Notice in this example we can't use '_keyname.ED' because we will have to write the template like 
{# raw #}
'SET SUPER_ENTITY_DEF_ID = @ED.{{super_entity_def_keyname | suggest(_keynames.ED)}}
{# endraw #}
 But super entity definition can be 'NULL' and in that case it will not a vale a SQL. 

So instead we use "full keyname" and we write the template as follows:
UPDATE EVA_ENTITY_DEFINITION
SET SUPER_ENTITY_DEF_ID= {{super_entity_def_keyname | suggest(_keynames.FULL_ED)}}
where {{ entity_def_keyname }};

Other  times you might have dont a previous query and you have an id and you need to get the keyname to build you SQL script:
{% set default_type_id = _keynames.keyname("PD",2003) %}
set TYPE =@PD.{{ type_id | default(default_type_id)  | suggest(kenyames.ED) }}

Or if the field an be null you can use instead the full_keyname:
{% set default_full_type_id =_keynames.full_keyname("PD",2003) %}
set TYPE ={{ full_type_id | default(default_full_type_id) | suggest(keynames.FULL_ED) }}

NOTE: we are using the variables "default_type_id" and "default_full_type_id" becase methods can not be called within filters.
If you try calling a filter a passing a method youll get an error message indicating what filters parameter should be


A good example using _keynames can be found in the rewire_verb.sql
